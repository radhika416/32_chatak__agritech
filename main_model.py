# -*- coding: utf-8 -*-
"""main_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15t65k_crPkOYljfDgapemga_ZanFZjz4
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import matplotlib.pyplot as plt
import os

# Class labels
class_labels = [
    'Tomato - Healthy',
    'Tomato - Jassid and Mite',
    'Tomato - Leaf Miner',
    'Tomato - Mite',
    'Tomato - Nitrogen Deficiency',
    'Tomato - Nitrogen and Potassium Deficiency',
    'Tomato - Potassium Deficiency'
]

# Specify the paths to the model and the test image
model_path = "/content/main_model.h5"  # Replace with your model's file path
test_image_path = "/content/tomato__LM (9)_2446072c86684a3fa39f45a12526c346.JPG"  # Replace with your test image file path

# Load the model
print(f"Loading model from {model_path}...")
model = load_model(model_path)
print("Model loaded successfully!")

# Function to preprocess the image
def preprocess_image(image_path, target_size):
    image = Image.open(image_path).convert("RGB")
    image = image.resize(target_size)
    image_array = np.array(image) / 255.0  # Normalize pixel values
    return image_array, image

# Preprocess the specified image
input_size = (224, 224)  # Replace with your model's expected input size
image_array, original_image = preprocess_image(test_image_path, input_size)

# Add batch dimension
image_batch = np.expand_dims(image_array, axis=0)

# Perform prediction
print("Performing prediction on the input image...")
predictions = model.predict(image_batch)
predicted_class = np.argmax(predictions, axis=-1)[0]  # Get the class index

# Map the predicted class to its label
predicted_label = class_labels[predicted_class]

# Display the results
print(f"Predictions: {predictions}")
print(f"Predicted Class Index: {predicted_class}")
print(f"Predicted Class: {predicted_label}")

# Show the input image
plt.imshow(original_image)
plt.title(f"Predicted Class: {predicted_label}")
plt.axis('off')
plt.show()